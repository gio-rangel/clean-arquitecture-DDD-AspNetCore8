// <auto-generated />
using System;
using CleanArchitecture.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CleanArchitecture.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250113144054_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CleanArchitecture.Domain.Cars.Entities.Car", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int[]>("Accesories")
                        .IsRequired()
                        .HasColumnType("integer[]")
                        .HasColumnName("accesories");

                    b.Property<DateTime?>("LastRentalDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_rental_date");

                    b.Property<string>("Model")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("model");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<string>("Vin")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("vin");

                    b.HasKey("Id")
                        .HasName("pk_cars");

                    b.ToTable("cars", (string)null);
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Rentals.Entities.Rental", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("BookingRejectDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("booking_reject_date");

                    b.Property<DateTime>("CancellationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("cancellation_date");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uuid")
                        .HasColumnName("car_id");

                    b.Property<DateTime>("CompletationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completation_date");

                    b.Property<DateTime>("ConfirmationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("confirmation_date");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_rentals");

                    b.HasIndex("CarId")
                        .HasDatabaseName("ix_rentals_car_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_rentals_user_id");

                    b.ToTable("rentals", (string)null);
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Reviews.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uuid")
                        .HasColumnName("car_id");

                    b.Property<string>("Commentary")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("commentary");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int?>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("rating");

                    b.Property<Guid>("RentalId")
                        .HasColumnType("uuid")
                        .HasColumnName("rental_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_reviews");

                    b.HasIndex("CarId")
                        .HasDatabaseName("ix_reviews_car_id");

                    b.HasIndex("RentalId")
                        .HasDatabaseName("ix_reviews_rental_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_reviews_user_id");

                    b.ToTable("reviews", (string)null);
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Users.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("last_name");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_user_email");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Cars.Entities.Car", b =>
                {
                    b.OwnsOne("CleanArchitecture.Domain.Shared.ValueObjects.Currency", "MaintenancePrice", b1 =>
                        {
                            b1.Property<Guid>("CarId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("maintenance_price_amount");

                            b1.Property<string>("CurrencyType")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("maintenance_price_currency_type");

                            b1.HasKey("CarId");

                            b1.ToTable("cars");

                            b1.WithOwner()
                                .HasForeignKey("CarId")
                                .HasConstraintName("fk_cars_cars_id");
                        });

                    b.OwnsOne("CleanArchitecture.Domain.Shared.ValueObjects.Currency", "Price", b1 =>
                        {
                            b1.Property<Guid>("CarId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("price_amount");

                            b1.Property<string>("CurrencyType")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("price_currency_type");

                            b1.HasKey("CarId");

                            b1.ToTable("cars");

                            b1.WithOwner()
                                .HasForeignKey("CarId")
                                .HasConstraintName("fk_cars_cars_id");
                        });

                    b.OwnsOne("CleanArchitecture.Domain.Cars.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("CarId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_city");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_country");

                            b1.Property<string>("Depto")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_depto");

                            b1.Property<string>("Province")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_province");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_street");

                            b1.Property<int>("StreetNumber")
                                .HasColumnType("integer")
                                .HasColumnName("address_street_number");

                            b1.HasKey("CarId");

                            b1.ToTable("cars");

                            b1.WithOwner()
                                .HasForeignKey("CarId")
                                .HasConstraintName("fk_cars_cars_id");
                        });

                    b.Navigation("Address");

                    b.Navigation("MaintenancePrice");

                    b.Navigation("Price");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Rentals.Entities.Rental", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Cars.Entities.Car", null)
                        .WithMany()
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rentals_cars_car_id");

                    b.HasOne("CleanArchitecture.Domain.Users.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rentals_user_user_id");

                    b.OwnsOne("CleanArchitecture.Domain.Shared.ValueObjects.Currency", "AccesoriesPrice", b1 =>
                        {
                            b1.Property<Guid>("RentalId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("accesories_price_amount");

                            b1.Property<string>("CurrencyType")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("accesories_price_currency_type");

                            b1.HasKey("RentalId");

                            b1.ToTable("rentals");

                            b1.WithOwner()
                                .HasForeignKey("RentalId")
                                .HasConstraintName("fk_rentals_rentals_id");
                        });

                    b.OwnsOne("CleanArchitecture.Domain.Shared.ValueObjects.Currency", "BasePrice", b1 =>
                        {
                            b1.Property<Guid>("RentalId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("base_price_amount");

                            b1.Property<string>("CurrencyType")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("base_price_currency_type");

                            b1.HasKey("RentalId");

                            b1.ToTable("rentals");

                            b1.WithOwner()
                                .HasForeignKey("RentalId")
                                .HasConstraintName("fk_rentals_rentals_id");
                        });

                    b.OwnsOne("CleanArchitecture.Domain.Shared.ValueObjects.Currency", "FinalPrice", b1 =>
                        {
                            b1.Property<Guid>("RentalId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("final_price_amount");

                            b1.Property<string>("CurrencyType")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("final_price_currency_type");

                            b1.HasKey("RentalId");

                            b1.ToTable("rentals");

                            b1.WithOwner()
                                .HasForeignKey("RentalId")
                                .HasConstraintName("fk_rentals_rentals_id");
                        });

                    b.OwnsOne("CleanArchitecture.Domain.Shared.ValueObjects.Currency", "MaintenancePrice", b1 =>
                        {
                            b1.Property<Guid>("RentalId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("maintenance_price_amount");

                            b1.Property<string>("CurrencyType")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("maintenance_price_currency_type");

                            b1.HasKey("RentalId");

                            b1.ToTable("rentals");

                            b1.WithOwner()
                                .HasForeignKey("RentalId")
                                .HasConstraintName("fk_rentals_rentals_id");
                        });

                    b.OwnsOne("CleanArchitecture.Domain.Rentals.ValueObjects.DateRange", "RentalPeriod", b1 =>
                        {
                            b1.Property<Guid>("RentalId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<DateOnly>("End")
                                .HasColumnType("date")
                                .HasColumnName("rental_period_end");

                            b1.Property<DateOnly>("Start")
                                .HasColumnType("date")
                                .HasColumnName("rental_period_start");

                            b1.HasKey("RentalId");

                            b1.ToTable("rentals");

                            b1.WithOwner()
                                .HasForeignKey("RentalId")
                                .HasConstraintName("fk_rentals_rentals_id");
                        });

                    b.Navigation("AccesoriesPrice")
                        .IsRequired();

                    b.Navigation("BasePrice")
                        .IsRequired();

                    b.Navigation("FinalPrice")
                        .IsRequired();

                    b.Navigation("MaintenancePrice")
                        .IsRequired();

                    b.Navigation("RentalPeriod")
                        .IsRequired();
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Reviews.Entities.Review", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Cars.Entities.Car", null)
                        .WithMany()
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reviews_cars_car_id");

                    b.HasOne("CleanArchitecture.Domain.Rentals.Entities.Rental", null)
                        .WithMany()
                        .HasForeignKey("RentalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reviews_rentals_rental_id");

                    b.HasOne("CleanArchitecture.Domain.Users.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reviews_user_user_id");
                });
#pragma warning restore 612, 618
        }
    }
}
